#!/usr/bin/env node

var cluster = require('cluster');
var os = require('os');
if (!cluster.isMaster) {
  /**
   * Module dependencies.
   */

  app = require('../app');
  app.id = -1;
  // Set framework ID
  app.on('message', function(message) {
    if (message.type === 'id') {
      app.id = message.id;
      app.emit("assignedId")
    }
  });

  var debug = require('debug')('amajson:server');
  var http = require('http');

  /**
   * Get port from environment and store in Express.
   */

  var port = normalizePort(process.env.PORT || '3000');
  app.set('port', port);

  /**
   * Create HTTP server.
   */

  var server = http.createServer(app);

  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);

  /**
   * Normalize a port into a number, string, or false.
   */

  function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
      // named pipe
      return val;
    }

    if (port >= 0) {
      // port number
      return port;
    }

    return false;
  }

  /**
   * Event listener for HTTP server "error" event.
   */

  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    var bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  /**
   * Event listener for HTTP server "listening" event.
   */

  function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
    debug('Listening on ' + bind);
  }

} else {
  function onMessage(message) {
    console.log("Getting Message");
    console.log('Message ->', message);
  }
  function forker(id) {

    // Run framework
    var fork = cluster.fork();
    fork.id = id
    fork.on('message', onMessage);
    // Send ID
    //  keeping id same so that you can have a single service model
    fork.send({type: 'id', id: id});

  }

  cluster.on('exit', function(worker, code, signal) {
    console.log('worker %d died (%s). restarting...', worker.process.pid, signal || code);
    forker(worker.id);
  });

  var numCPUs = os.cpus().length;

  for (var i = 0; i < numCPUs; i++) {
    forker(i)
  }
}
